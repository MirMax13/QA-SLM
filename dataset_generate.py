import fitz  # PyMuPDF
import requests
import json
import re
from time import sleep

PDF_PATH = "DA68-04844A-00_EN.pdf"
LM_API_URL = "http://127.0.0.1:1234/v1/chat/completions"
HEADERS = {"Content-Type": "application/json"}
MODEL_NAME = "openchat"
OUTPUT_JSON = "fridge_dataset_from_pdf.json"

# 1. –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ PDF
def extract_text_blocks(pdf_path):
    doc = fitz.open(pdf_path)
    text = ""
    for page in doc:
        text += page.get_text()
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∞–±–æ –≤–µ–ª–∏–∫–∏—Ö –±–ª–æ–∫–∞—Ö (–º–æ–∂–µ—à –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏)
    blocks = re.split(r'\n(?=[A-Z–ê-–Ø][^\n]{0,80}\n)', text)  # –Ω–æ–≤–∏–π –±–ª–æ–∫ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    for i, block in enumerate(blocks[:5]):
        print(f"\nüîπ –ë–ª–æ–∫ {i+1}:\n{block[:300]}...\n{'-'*50}")
    return [b.strip() for b in blocks if len(b.strip()) > 100]

# 2. –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –±–ª–æ–∫—É
def generate_qa(block_text):
    prompt = f"""
    <|im_start|>system
    –¢–∏ ‚Äî —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –ó–≥–µ–Ω–µ—Ä—É–π 2 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ –º–æ–∂—É—Ç—å —Å—Ç–æ—Å—É–≤–∞—Ç–∏—Å—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó, —ñ –¥–∞–π –¥–æ –∫–æ–∂–Ω–æ–≥–æ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    –§–æ—Ä–º–∞—Ç:
    Q: ...
    A: ...
    Q: ...
    A: ...
    –¢–µ–∫—Å—Ç —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:
    \"\"\"{block_text}\"\"\"
    <|im_end|>
    <|im_start|>user
    –°—Ç–≤–æ—Ä–∏ QA –ø–∞—Ä–∏<|im_end|>
    <|im_start|>assistant
    """

    payload = {
        "model": MODEL_NAME,
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 300
    }

    try:
        response = requests.post(LM_API_URL, headers=HEADERS, json=payload, timeout=40)
        response.raise_for_status()
        content = response.json()["choices"][0]["message"]["content"]
        return parse_qa_pairs(content)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
        return []

# 3. –ü–∞—Ä—Å–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
def parse_qa_pairs(text):
    qas = []
    qa_blocks = re.findall(r"Q:(.*?)A:(.*?)(?=Q:|$)", text, re.DOTALL)
    for q, a in qa_blocks:
        question = q.strip().replace("\n", " ")
        answer = a.strip().replace("\n", " ")
        if question and answer:
            qas.append({
                "instruction": question,
                "response": answer
            })
    return qas

# 4. –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
def main():
    blocks = extract_text_blocks(PDF_PATH)
    dataset = []

    for idx, block in enumerate(blocks):
        print(f"üîπ –û–±—Ä–æ–±–ª—è—î–º–æ –±–ª–æ–∫ {idx+1}/{len(blocks)}")
        qa_pairs = generate_qa(block)
        dataset.extend(qa_pairs)

        for qa in qa_pairs:
            print(f"Q: {qa['instruction']}")
            print(f"A: {qa['response']}\n---")
        sleep(2)

    with open(OUTPUT_JSON, "w", encoding="utf-8") as f:
        json.dump(dataset, f, ensure_ascii=False, indent=2)

    print(f"\n‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(dataset)} QA –ø–∞—Ä, –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {OUTPUT_JSON}")

if __name__ == "__main__":
    main()
